<?xml version="1.0" encoding="utf-8" ?>
<SourceAnalyzer Name="Bashwork Readability Rules">
	<Description>
		Custom length and width rules for the Bashwork C# coding standards.
	</Description>
	<Properties>
		<IntegerProperty
		  Name="MaxCharactersPerLine"
		  DefaultValue="120"
		  FriendlyName="Maximum number of characters in a line of code."
		  Description="Indicates the maximum length that any given line of code must be before it must be broken."
		/>
		<IntegerProperty
		  Name="MaxLinesPerMethod"
		  DefaultValue="50"
		  FriendlyName="Maximum number of lines in a method."
		  Description="Indicates the maximum number of lines that can be in a method, accessor, indexer, or constructor."
		/>
		<IntegerProperty
		  Name="MaxParametersPerMethod"
		  DefaultValue="7"
		  FriendlyName="Maximum number of parameters in a method."
		  Description="Indicates the maximum number of parameters that can be in a method, accessor, indexer, or constructor."
		/>
	</Properties>	
	<Rules>
		<Rule Name="LineCannotExceedMaxLength" CheckId="ST2001">
			<Context>Lines should break at first logical break after {0} characters.</Context>
			<Description>
				To keep code optimally readable, it should not a reasonable width.
				This is covered in C# Coding Standard 2.2.8.
			</Description>
		</Rule>
		<Rule Name="MethodCannotExceedMaxLines" CheckId="ST2002">
			<Context>{0} may not be longer than {1} lines.</Context>
			<Description>
				To keep code optimally readable, methods should not be longer than a reasonable number of lines.
				This is covered in C# Coding Standard 2.2.3.
			</Description>
		</Rule>
		<Rule Name="OneDeclarationPerLine" CheckId="ST2003">
			<Context>You may only declare one field or variable per line.</Context>
			<Description>
				To make code easier to maintain and read, variables and fields should each be declared
				on their own line.  This is covered in C# Coding Standard 2.5.1.
			</Description>
		</Rule>
		<Rule Name="NoCStyleCommentsAllowed" CheckId="ST2004">
			<Context>Do not use C-Style multiline comments, use // and /// instead.</Context>
			<Description>
				In general, you should always prefer /// comments for commenting and markup on any member,
				and inside the method, the // comments are the most concise and visually stand out well.
				This is covered in C# Coding Standard 2.3.2.
			</Description>
		</Rule>
		<Rule Name="NoBoxedCommentsAllowed" CheckId="ST2005">
			<Context>Do not 'box' comments.</Context>
			<Description>
				With the advent of syntax highlighting, 'box' comments or 'horizontal line' comments
				are just clutter that do not aid in code readability and just bloat the source file.
				This is covered in C# Coding Standard 2.3.3.
			</Description>
		</Rule>
		<Rule Name="MethodCannotExceedMaxParameters" CheckId="ST2006">
			<Context>{0} cannot have more than {1} parameters.</Context>
			<Description>
				To avoid making methods too large and unreadable, a method, constructor, finalizer, 
				indexer, etc should never take more than a maximum number of parameters.  Anything 
				above that should be refactored for readability.
				This is covered in C# Coding Standard 3.2.2.
			</Description>
		</Rule>		
	</Rules>
</SourceAnalyzer> 