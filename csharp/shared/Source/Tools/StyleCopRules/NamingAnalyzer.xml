<?xml version="1.0" encoding="utf-8" ?>
<SourceAnalyzer Name="Bashwork Naming Rules">
	<Description>
		Custom naming rules for Bashwork C# Coding Standards.
	</Description>
	<Rules>
		<Rule Name="NonPublicFieldsMustStartWithUnderscore" CheckId="ST3001">
			<Context>{0} field {1} must begin with an underscore character.</Context>
			<Description>
				To help identify instance members, non-public fields should begin with an underscore
				as per C# code standard 2.4.3.
			</Description>
		</Rule>
		<Rule Name="InterfacesMustStartWithLetterI" CheckId="ST3002">
			<Context>Interface {0} must begin with the letter 'I'.</Context>
			<Description>
				To help identify interfaces, they should always begin with the letter 'I' as per C#
				code standard 2.4.4.
			</Description>
		</Rule>
		<Rule Name="AbstractClassesMustStartWithAbstract" CheckId="ST3003">
			<Context>Abstract class {0} must begin with the prefix 'Abstract'.</Context>
			<Description>
				To help identify abstract classes, they should always begin with the prefix 'Abstract'
				as per C# code standard 2.4.5.
			</Description>
		</Rule>
		<Rule Name="ExceptionClassesMustEndWithException" CheckId="ST3004">
			<Context>Exception class {0} must end with the suffix 'Exception'.</Context>
			<Description>
				To help identify exception classes, they should always end with the suffix 'Exception'
				as per C# code standard 2.4.7.
			</Description>
		</Rule>
		<Rule Name="AttributeClassesMustStartWithAttribute" CheckId="ST3005">
			<Context>Attribute class {0} must end with the suffix 'Attribute'.</Context>
			<Description>
				To help identify Attribute classes, they should always end with the suffix 'Attribute'
				as per C# code standard 2.4.6.
			</Description>
		</Rule>
		<Rule Name="TypeParametersMustStartWithLetterT" CheckId="ST3006">
			<Context>Type parameter {0} must start with the letter 'T' in generic {1}.</Context>
			<Description>
				To help identify type parameters, they should always be prefixed with the letter
				'T' as per C# code standard 2.4.8.
			</Description>
		</Rule>
		<Rule Name="NoUnderscoresExceptWhereValid" CheckId="ST3007">
			<Context>{0} name {1} may not use underscore except prefixing private fields or in unit test method names or event handler method names.</Context>
			<Description>
				Underscores are generally forbidden in naming except for three exceptions: the first
				being to prefix a private field name, and the second being to separate parts of a
				unit test name, and the third being to separate a control name from the event name in an
				event handler method name.
				This is covered in C# Coding Standard 2.4.9.
			</Description>
		</Rule>
		<Rule Name="BoolPropertyNamesMustBePrefixed" CheckId="ST3008">
			<Context>Properties of type bool must be prefixed by 'Is', 'Has', 'Should', or 'Can'.</Context>
			<Description>
				Boolean properties represent a true or false value, thus for maximum readability, they should
				be prefixed with a boolean prefix such as 'Is', 'Has', 'Should', or 'Can' for maximum 
				readability.
				This is covered in C# Coding Standard 2.4.18.
			</Description>
		</Rule>
		<Rule Name="PropertyMayNotStartWithTypeName" CheckId="ST3009">
			<Context>Property {0} should not be prefixed with its enclosing type name {1}.</Context>
			<Description>
				Property names should always be respective of the context of the enclosing type.  Thus
				if you have a type Customer, it is redundant to have a property CustomerName as you already
				know the Name belongs to the Customer that encloses it.
				This is covered in C# Coding Standard 2.4.17.
			</Description>
		</Rule>
		<Rule Name="PropertyMayNotStartWithGetOrSet" CheckId="ST3010">
			<Context>Property {0} should not be prefixed with 'Get' or 'Set'.</Context>
			<Description>
				C# property names should be named like attributes and not methods, hence the terms
				'Set' and 'Get' to prefix a property name can be misleading and should be avoided.
				This is covered in C# Coding Standard 2.4.19.
			</Description>
		</Rule>
		PropertyMayNotStartWithGetOrSet
	</Rules>
</SourceAnalyzer>