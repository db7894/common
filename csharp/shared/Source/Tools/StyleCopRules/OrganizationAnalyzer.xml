<?xml version="1.0" encoding="utf-8" ?>
<SourceAnalyzer Name="Bashwork Source File Organization Rules">
	<Description>
		Custom source file organization rules for Bashwork C# coding standards.
	</Description>
	<Rules>
		<Rule Name="OnlyOneNamespacePerFile" CheckId="ST4001">
			<Context>Only one namespace is allowed per source file.</Context>
			<Description>
				To improve maintainability, a source file should stick to one cohesive unit of thought.  
				Multiple namespaces by definition are separate units of thought.  
				This is covered in C# Coding Standard 2.1.2.
			</Description>
		</Rule>
		<Rule Name="NamespaceMustMatchPath" CheckId="ST4002">
			<Context>Namespace {0} name must parallel source file path {1}.</Context>
			<Description>
				To improve maintainability, the source directory structure should
				mirror the namespace structure.
				This is covered in C# Coding Standard 2.1.7.
			</Description>
		</Rule>
		<Rule Name="FileMustHaveNamspace" CheckId="ST4003">
			<Context>Each file must have one and only one namespace.</Context>
			<Description>
				All source elements should be under an accurate namespace hierarchy.
				This is covered in C# Coding Standard 2.1.7.
			</Description>
		</Rule>
		<Rule Name="UsingsOutsideNamespace" CheckId="ST4004">
			<Context>Using statements must be outside of the namespace declaration.</Context>
			<Description>
				The C# standards dictate that the using statements come before the namespace declaration.
				This is covered in C# Coding Standard 2.1.3.
			</Description>
		</Rule>
		<Rule Name="NoNestedNamespaces" CheckId="ST4005">
			<Context>No nested namespaces are allowed in a source file.</Context>
			<Description>
				To improve maintainability, a source file should stick to one cohesive unit of thought.
				Multiple namespaces by definition are separate units of thought.
				This is covered in C# Coding Standard 2.1.2.
			</Description>
		</Rule>
		<Rule Name="OnlyOnePrimaryTypePerFile" CheckId="ST4006">
			<Context>Only one top level type per source file.</Context>
			<Description>
				To improve maintainability, a source file should stick to one cohesive unit of thought.
				Multiple namespaces by definition are separate units of thought.
				This is covered in C# Coding Standard 2.1.8.
			</Description>
		</Rule>
		<Rule Name="PrimaryTypesMustBeInsideNamespaces" CheckId="ST4007">
			<Context>Top level {0} must be declared inside a namespace.</Context>
			<Description>
				To improve maintainability, primary types should be declared inside namespaces that
				mirror the file and directory structure.
				This is covered in C# Coding Standard 2.1.7.
			</Description>
		</Rule>
		<Rule Name="PrimaryTypeNameMustEqualFileName" CheckId="ST4008">
			<Context>Top level {0} name must be same as filename to first dot ('.').</Context>
			<Description>
				To improve maintainability, primary types should be declared inside namespaces that
				mirror the file and directory structure.
				This is covered in C# Coding Standard 2.1.4.
			</Description>
		</Rule>
		<Rule Name="FilenamesMustBeginUpperCase" CheckId="ST4009">
			<Context>C# source file name {0} must be Pascal-case.</Context>
			<Description>
				To improve maintainability, and consistency, all C# source files should begin with a 
				capital letter and have each subsequent word's first letter capitalized as well (PascalCase).
				This is covered in C# Coding Standard 2.1.6.
			</Description>
		</Rule>
		<Rule Name="NamespaceElementsMustBePascalCase" CheckId="ST4010">
			<Context>All parts of namespace {0} must be Pascal-case.</Context>
			<Description>
				To improve maintainability, and consistency, all parts of a namespace name should be
				in Pascal-case.  That is, each should begin with a
				capital letter and have each subsequent word's first letter capitalized as well.
				This is covered in C# Coding Standard 2.1.6.
			</Description>
		</Rule>
	</Rules>
</SourceAnalyzer>