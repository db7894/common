#!/usr/bin/env python
import sys
import argparse
from sdblock import LockClient
from datetime import timedelta

#------------------------------------------------------------
# logging
#------------------------------------------------------------

import logging
logger = logging.getLogger('sdblock')

#--------------------------------------------------------------------------------
# main
#--------------------------------------------------------------------------------

def get_options():
    ''' Retrieve the command line options for the script

    :returns: The parsed command line options
    '''
    parser = argparse.ArgumentParser(description="System Lock Utility")
    parser.add_argument('-v', '--verbose', dest='debug', action='store_true',
        default=False, help='Enable debug logging if set')
    parser.add_argument('-i', '--identifier', dest='identifier',
        default=None, help='The unique name of this system')
    parser.add_argument('-n', '--name', dest='name',
        default=None, help='The name of the lock to operate on')
    parser.add_argument('-w', '--wait', dest='wait', type=int,
        default=(5 * 60), help='The amount of time in seconds to wait for the lock (5 minutes)')
    parser.add_argument('-l', '--lock', dest='lock', action="store_true",
        default=True, help='Attempt to lock the requested lock')
    parser.add_argument('-u', '--unlock', dest='lock', action="store_false",
        default=True, help='Attempt to unlock the requested lock')
    parser.add_argument('-f', '--force', dest='force', action="store_true",
        default=False, help='Force the lock operation regardless if it is currently held')

    options = parser.parse_args()
    options.wait = timedelta(seconds=options.wait)

    return options

def main():
    ''' An example main that can be used to coordinate between
    applications on the same or different systems.
    '''
    options = get_options()

    if options.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.basicConfig()

    try:
        params = {
            'wait_time' : options.wait,
            'lock_name' : options.name,
            'host_name' : options.identifier
        }
        locker = LockClient(**params)
        action = {
            (True,   True) : lambda: locker.force_lock(),
            (True,  False) : lambda: locker.lock(),
            (False,  True) : lambda: locker.force_unlock(),
            (False, False) : lambda: locker.unlock(),
        }[(options.lock, options.force)]

        return 0 if action() else 1

    except Exception:
        logger.exception("encountered an error working with the lock client")
        return -1

#--------------------------------------------------------------------------------
# main launcher
#--------------------------------------------------------------------------------

if __name__ == '__main__':
    sys.exit(main())
